/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.caregivers;

import business.EcoSystem;
import business.employee.Employee;
import business.enterprise.Enterprise;
import business.individuals.Individual;
import business.useraccount.UserAccount;
import business.workqueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Iterator;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sayalipathare
 */
public class CaregiverWorkAreaJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    UserAccount userAccount;
    Individual individual;
    Enterprise enterprise;
    EcoSystem system;
    /**
     * Creates new form CaregiverWorkAreaJPanel
     * @param userProcessContainer
     * @param userAccount
     * @param enterprise
     * @param system
     */
    public CaregiverWorkAreaJPanel(JPanel userProcessContainer, UserAccount userAccount, Enterprise enterprise, EcoSystem system ) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.system = system;
        this.enterprise = enterprise;
        this.populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        manageApplicantsTable = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        btnAssign = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnMarkAsComplete = new javax.swing.JButton();

        manageApplicantsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Registration Id", "Applicant Name", "Sender", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(manageApplicantsTable);

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnAssign.setText("Assign to Doctor");
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });

        jLabel1.setText("Manage Applicants");

        btnMarkAsComplete.setText("Mark as Complete");
        btnMarkAsComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMarkAsCompleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(293, 293, 293)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 594, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(120, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnMarkAsComplete)
                        .addGap(18, 18, 18)
                        .addComponent(btnAssign)
                        .addGap(90, 90, 90))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnAssign)
                    .addComponent(btnMarkAsComplete))
                .addContainerGap(42, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    public void populateTable() {
            DefaultTableModel dtm = (DefaultTableModel) manageApplicantsTable.getModel();
            dtm.setRowCount(0);
            if(this.userAccount.getWorkQueue().getWorkRequestList().size() > 0) 
            {
                for (WorkRequest w : this.userAccount.getWorkQueue().getWorkRequestList()) 
                {
                    if(w.getIndividual()!= null)
                    {
                        Object row[] = new Object[5];
                        row[0] = w.getIndividual().getRegistrationId();
                        row[1] = w.getIndividual().getFirstName() + " " + w.getIndividual().getLastName();
                        row[2] = w.getSender();
                        row[3] = w.getStatus();
                        dtm.addRow(row);
                    }

                }
            }
        
    }
    
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed
        // TODO add your handling code here:
        int selectedRow = manageApplicantsTable.getSelectedRow();
        if(selectedRow >= 0) {
            int id = (Integer)manageApplicantsTable.getValueAt(selectedRow, 0);
            for(Individual i: system.getIndividualDirectory().getIndividualList()) {
                if(i.getRegistrationId() == id)
                {
                    this.individual = i;
                    break;
                }
            }
     
            AssignToDoctorJPanel assignToDoctorJPanel = new AssignToDoctorJPanel(userProcessContainer,userAccount,individual, enterprise, system);
            userProcessContainer.add("assignToDoctorJPanel",assignToDoctorJPanel);
            CardLayout layout=(CardLayout)userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
        else {
            JOptionPane.showMessageDialog(null, "Please select the individual to schedule an appointment with the Doctor.");
        }
     

    }//GEN-LAST:event_btnAssignActionPerformed

    private void btnMarkAsCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMarkAsCompleteActionPerformed
        // TODO add your handling code here:
        Individual ind = null;
        int selectedRow = manageApplicantsTable.getSelectedRow();
        if(selectedRow >= 0) {
            int id = (Integer)manageApplicantsTable.getValueAt(selectedRow, 0);
            for(Individual i: system.getIndividualDirectory().getIndividualList()) {
                if(i.getRegistrationId() == id)
                {
                    ind = i;
                    break;
                }
            }
            
            if(this.userAccount.getWorkQueue().getWorkRequestList().size() > 0) 
            {
                for (WorkRequest w : this.userAccount.getWorkQueue().getWorkRequestList()) 
                {
                    if(w.getIndividual().equals(ind))
                    {
                        if(w.getStatus().equalsIgnoreCase("Medication Completed"))
                        {
                             w.setStatus("Request Completed");
                             break;
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(null, "You cannot mark it as complete.");
                        }
                       
                    }

                }
            }
            
            Iterator map = enterprise.getEmpMap().entrySet().iterator();

            while (map.hasNext()) {
                Map.Entry mapElement = (Map.Entry) map.next();
                Employee e = ((Employee) mapElement.getKey());
                UserAccount ua = ((UserAccount) mapElement.getValue());
                
                if(this.userAccount.equals(ua))
                {
                    e.setStatus("Available");
                    break;
                }
            }
        }
        else {
            JOptionPane.showMessageDialog(null, "Please select the individual.");
        }
    }//GEN-LAST:event_btnMarkAsCompleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnMarkAsComplete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable manageApplicantsTable;
    // End of variables declaration//GEN-END:variables
}
