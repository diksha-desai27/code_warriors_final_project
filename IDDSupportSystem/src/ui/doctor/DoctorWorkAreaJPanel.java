/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.doctor;

import business.enterprise.Enterprise;
import business.useraccount.UserAccount;
import business.workqueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Iterator;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import ui.caregivers.AssignToDoctorJPanel;
import ui.enterprise.ManageUserAccountJPanel;

/**
 *
 * @author sayalipathare
 */
public class DoctorWorkAreaJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    UserAccount userAccount;
    WorkRequest wr;
    Enterprise enterprise;
    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    public DoctorWorkAreaJPanel(JPanel userProcessContainer, UserAccount userAccount,Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.enterprise = enterprise;
        this.populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        manageApplicantsJTable = new javax.swing.JTable();
        btnDecline = new javax.swing.JButton();
        btnAccept = new javax.swing.JButton();
        jBtnViewReport = new javax.swing.JButton();
        scheduleAppointmentBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(null);

        manageApplicantsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Registration Id", "Applicant Name", "Sender", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(manageApplicantsJTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(29, 127, 594, 125);

        btnDecline.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        btnDecline.setIcon(new javax.swing.ImageIcon(getClass().getResource("/NewImages/close.png"))); // NOI18N
        btnDecline.setText("Decline");
        btnDecline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeclineActionPerformed(evt);
            }
        });
        add(btnDecline);
        btnDecline.setBounds(480, 270, 150, 60);

        btnAccept.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        btnAccept.setIcon(new javax.swing.ImageIcon(getClass().getResource("/NewImages/check.png"))); // NOI18N
        btnAccept.setText("Accept");
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });
        add(btnAccept);
        btnAccept.setBounds(310, 270, 150, 60);

        jBtnViewReport.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jBtnViewReport.setText("Check/Provide Status");
        jBtnViewReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnViewReportActionPerformed(evt);
            }
        });
        add(jBtnViewReport);
        jBtnViewReport.setBounds(640, 130, 190, 50);

        scheduleAppointmentBtn.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        scheduleAppointmentBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/time.png"))); // NOI18N
        scheduleAppointmentBtn.setText("Schedule Appointment");
        scheduleAppointmentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleAppointmentBtnActionPerformed(evt);
            }
        });
        add(scheduleAppointmentBtn);
        scheduleAppointmentBtn.setBounds(650, 270, 206, 60);

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/NewImages/doctor.png"))); // NOI18N
        jLabel2.setText("    DOCTOR WORK AREA");
        add(jLabel2);
        jLabel2.setBounds(20, 30, 380, 60);

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/BackgroundBlue.png"))); // NOI18N
        jLabel3.setText("jLabel3");
        add(jLabel3);
        jLabel3.setBounds(80, 40, 800, 50);
    }// </editor-fold>//GEN-END:initComponents

    public void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) manageApplicantsJTable.getModel();
        dtm.setRowCount(0);
        if (this.userAccount.getWorkQueue().getWorkRequestList().size() > 0) {
            for (WorkRequest w : this.userAccount.getWorkQueue().getWorkRequestList()) {
                if (w.getIndividual() != null) {
                    Object row[] = new Object[5];
                    row[0] = w.getIndividual().getRegistrationId();
                    row[1] = w.getIndividual().getFirstName() + " " + w.getIndividual().getLastName();
                    row[2] = w.getSender();
                    row[3] = w.getStatus();
                    dtm.addRow(row);
                }

            }
        }
    }

    private void btnDeclineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeclineActionPerformed
        // TODO add your handling code here:
        int selectedRow = manageApplicantsJTable.getSelectedRow();
        //  UserAccount selectedUserAccount = null;
        if (selectedRow >= 0) {
            Integer registrationId = (Integer) manageApplicantsJTable.getValueAt(selectedRow, 0);
            for (WorkRequest wr : userAccount.getWorkQueue().getWorkRequestList()) {
                if (wr.getIndividual().getRegistrationId() == registrationId) {
                    if (wr.getStatus().equalsIgnoreCase("Requested to Doctor")) {
                        wr.setStatus("Declined");
                        wr.setSender(userAccount);
                        JOptionPane.showMessageDialog(null, "Request Declined successfully");
                        populateTable();
                        break;
                    } else {
                        JOptionPane.showMessageDialog(null, "You cannot decline this request");
                    }
                    break;
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a work request to take action.");
        }
    }//GEN-LAST:event_btnDeclineActionPerformed

    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed
        // TODO add your handling code here:
        int selectedRow = manageApplicantsJTable.getSelectedRow();
        if (selectedRow >= 0) {
            int id = (Integer) manageApplicantsJTable.getValueAt(selectedRow, 0);
            for (WorkRequest w : this.userAccount.getWorkQueue().getWorkRequestList()) {
                if (w.getIndividual().getRegistrationId() == id) {
                    wr = w;
                    if (wr.getStatus().equalsIgnoreCase("Requested to Doctor")) {
                        wr.setStatus("Accepted");
                        JOptionPane.showMessageDialog(null, "Request Accepted by doctor " + this.userAccount);
                        this.populateTable();

                    } else {
                        JOptionPane.showMessageDialog(null, "You cannot accept this work request");
                    }
                    break;
                }

            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a work request to accept");
        }
    }//GEN-LAST:event_btnAcceptActionPerformed

    private void scheduleAppointmentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleAppointmentBtnActionPerformed
        // TODO add your handling code here:

        int selectedRow = manageApplicantsJTable.getSelectedRow();
        if (selectedRow >= 0) {
            int id = (Integer) manageApplicantsJTable.getValueAt(selectedRow, 0);
            for (WorkRequest w : this.userAccount.getWorkQueue().getWorkRequestList()) {
                if (w.getIndividual().getRegistrationId() == id) {
                    wr = w;
                    if (wr.getStatus().equalsIgnoreCase("Accepted")) {
                        // wr.setStatus("Appointment Scheduled");
                        // JOptionPane.showMessageDialog(null, "R " + this.userAccount);
                        //   this.populateTable();  
                        AppointmentJPanel appointmentJPanel = new AppointmentJPanel(userProcessContainer, userAccount, wr,enterprise);
                        userProcessContainer.add("appointmentJPanel", appointmentJPanel);

                        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                        layout.next(userProcessContainer);

                    } else {
                        JOptionPane.showMessageDialog(null, "You cannot schedule an apointment for" + wr.getIndividual().getFirstName() + wr.getIndividual().getLastName());
                    }
                    break;
                }

            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a work request to schedule appointment");
        }

    }//GEN-LAST:event_scheduleAppointmentBtnActionPerformed

    private void jBtnViewReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnViewReportActionPerformed
        // TODO add your handling code here:
        
        
         int selectedRow = manageApplicantsJTable.getSelectedRow();
        if (selectedRow >= 0) {
            int id = (Integer) manageApplicantsJTable.getValueAt(selectedRow, 0);
            for (WorkRequest w : this.userAccount.getWorkQueue().getWorkRequestList()) {
                if (w.getIndividual().getRegistrationId() == id) {
                    wr = w;
                    if (wr.getStatus().equalsIgnoreCase("Appointment Confirmed")) {
                        // wr.setStatus("Appointment Scheduled");
                        // JOptionPane.showMessageDialog(null, "R " + this.userAccount);
                        //   this.populateTable();  
                        IndividualReportJPanel reportJPanel = new IndividualReportJPanel(userProcessContainer, userAccount, wr,enterprise);
                        userProcessContainer.add("reportJPanel", reportJPanel);

                        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                        layout.next(userProcessContainer);

                    } else {
                        JOptionPane.showMessageDialog(null, "You cannot chek/generate report for" + wr.getIndividual().getFirstName() + wr.getIndividual().getLastName());
                    }
                    break;
                }

            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a work request to view/generate report");
        }

    }//GEN-LAST:event_jBtnViewReportActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnDecline;
    private javax.swing.JButton jBtnViewReport;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable manageApplicantsJTable;
    private javax.swing.JButton scheduleAppointmentBtn;
    // End of variables declaration//GEN-END:variables
}
