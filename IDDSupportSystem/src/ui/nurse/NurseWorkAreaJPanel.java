/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.nurse;

import business.EcoSystem;
import business.enterprise.Enterprise;
import business.individuals.Individual;
import business.useraccount.UserAccount;
import business.workqueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sayalipathare
 */
public class NurseWorkAreaJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    UserAccount userAccount;
    Enterprise enterprise;
    EcoSystem system;
    Individual individual;
    /**
     * Creates new form NurseWorkAreaJPanel
     * @param userProcessContainer
     * @param userAccount
     * @param enterprise
     * @param system
     */
    public NurseWorkAreaJPanel(JPanel userProcessContainer, UserAccount userAccount, Enterprise enterprise, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.system = system;
        this.enterprise = enterprise;
        this.populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        individualsListTable = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        btnSchedule = new javax.swing.JButton();

        individualsListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Registration Id", "Applicant Name", "Sender", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(individualsListTable);

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnSchedule.setText("Schedule Meeting");
        btnSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScheduleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(316, 316, 316)
                        .addComponent(btnSchedule))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 594, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(91, 91, 91))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnSchedule))
                .addGap(162, 162, 162))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    public void populateTable() {
         DefaultTableModel dtm = (DefaultTableModel) individualsListTable.getModel();
            dtm.setRowCount(0);
            if(this.userAccount.getWorkQueue().getWorkRequestList().size() > 0) 
            {
                for (WorkRequest w : this.userAccount.getWorkQueue().getWorkRequestList()) 
                {
                    if(w.getIndividual()!= null)
                    {
                        Object row[] = new Object[5];
                        row[0] = w.getIndividual().getRegistrationId();
                        row[1] = w.getIndividual().getFirstName() + " " + w.getIndividual().getLastName();
                        row[2] = w.getSender();
                        row[3] = w.getStatus();
                        dtm.addRow(row);
                    }

                }
            }
    }
    
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScheduleActionPerformed
        // TODO add your handling code here:
        int selectedRow = individualsListTable.getSelectedRow();
        if(selectedRow >= 0) 
        {
            int id = (Integer)individualsListTable.getValueAt(selectedRow, 0);
            for(Individual i: system.getIndividualDirectory().getIndividualList()){
                if(i.getRegistrationId() == id)
                {
                    individual = i;
                }
            }
            
            for(WorkRequest w: this.userAccount.getWorkQueue().getWorkRequestList())
            {
                if(w.getIndividual().equals(individual))
                {
                    if(w.getStatus().equalsIgnoreCase("Assigned to Nurse"))
                    {
                        ScheduleMeetingJPanel schedule = new ScheduleMeetingJPanel(userProcessContainer, userAccount, individual, enterprise, system);
                        userProcessContainer.add("schedule",schedule);

                        CardLayout layout=(CardLayout)userProcessContainer.getLayout();
                        layout.next(userProcessContainer);
                        
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "You cannot schedule the meeting.");
                       
                    }
                    break;
                }
            }

        }
        else
        {
            JOptionPane.showMessageDialog(null, "Please select an individual to view details.");
        }
    }//GEN-LAST:event_btnScheduleActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSchedule;
    private javax.swing.JTable individualsListTable;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
